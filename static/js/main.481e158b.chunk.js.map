{"version":3,"sources":["components/gameCell.jsx","components/gameGrid.jsx","components/buttons.jsx","components/winner.jsx","components/gameBody.jsx","components/util.js","reportWebVitals.js","index.js"],"names":["GameCell","id","onClick","value","className","GameGrid","board","map","cell","i","StartButton","reset","winner","disabled","variant","Winner","hidden","GameBody","useState","Array","fill","setBoard","xIsNext","setXisNext","squares","lines","length","a","b","c","calculateWinner","useEffect","console","log","resetGame","boardCopy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.481e158b.chunk.js","sourcesContent":["const GameCell = ({ id, onClick, value }) => {\r\n  const className = `game-cell ${\r\n    value === null ? null : value === \"X\" ? \"x\" : \"o\"\r\n  }`;\r\n\r\n  return (\r\n    <div className={className} onClick={onClick} id={id}>\r\n      <span className=\"size150\">{value}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameCell;\r\n","import GameCell from \"./gameCell.jsx\";\r\n\r\nconst GameGrid = ({ board, onClick }) => {\r\n  return (\r\n    <div className=\"game-grid\">\r\n      {board.map((cell, i) => (\r\n        <GameCell key={i} id={i} value={cell} onClick={() => onClick(i)} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameGrid;\r\n","const StartButton = ({ reset, winner }) => {\r\n  return (\r\n    <button\r\n      disabled={winner}\r\n      className=\"m-2 p-2\"\r\n      onClick={reset}\r\n      variant=\"secondary\"\r\n    >\r\n      RESET\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default StartButton;\r\n","const Winner = ({ winner, reset }) => {\r\n  return (\r\n    <div className=\"winner\" hidden={!winner} onClick={reset}>\r\n      <h3>Winner: {winner}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Winner;\r\n","// import Button from \"react-bootstrap/Button\";\r\n// import Row from \"react-bootstrap/Row\";\r\n\r\nimport { Fragment, useEffect, useState } from \"react\";\r\n\r\nimport GameGrid from \"./gameGrid\";\r\nimport StartButton from \"./buttons\";\r\nimport Winner from \"./winner\";\r\nimport { calculateWinner } from \"./util\";\r\n\r\nconst GameBody = () => {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [xIsNext, setXisNext] = useState(true);\r\n\r\n  const winner = calculateWinner(board);\r\n\r\n  const handleClick = (i) => {\r\n    const boardCopy = [...board];\r\n    // If user click an occupied square or if game is won, return\r\n    if (winner || boardCopy[i]) return;\r\n    // Put an X or an O in the clicked square\r\n    boardCopy[i] = xIsNext ? \"X\" : \"O\";\r\n    setBoard(boardCopy);\r\n    setXisNext(!xIsNext);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (winner) {\r\n      console.log(\"Winner: \", winner);\r\n    }\r\n  }, [winner]);\r\n\r\n  const resetGame = () => {\r\n    console.log(\"called!\");\r\n    setBoard(Array(9).fill(null));\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container\">\r\n        <h1 className=\"text-center\">\r\n          <strong>\r\n            Tic <span className=\"text-white\">Tac</span> Toe\r\n          </strong>\r\n        </h1>\r\n        <hr />\r\n        <div className=\"text-center row justify-content-around\">\r\n          <h1 className=\"m-0 p-2\">\r\n            {winner ? null : \"Next player: \" + (xIsNext ? \"X\" : \"O\")}\r\n          </h1>\r\n\r\n          <StartButton reset={resetGame} winner={winner} />\r\n        </div>\r\n        <hr />\r\n        <GameGrid board={board} onClick={handleClick} />\r\n      </div>\r\n      <Winner winner={winner} reset={resetGame} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default GameBody;\r\n","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport GameBody from \"./components/gameBody.jsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameBody />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}