{"version":3,"sources":["utils/theme.js","context/themeContext.js","components/gameCell.jsx","components/gameGrid.jsx","components/buttons.jsx","components/gameBody.jsx","components/themeBar.jsx","components/winner.jsx","components/Main.jsx","components/util.js","reportWebVitals.js","index.js"],"names":["light","textColor","backgroundColor","gridColor","boadBackgroundColor","xColor","oColor","fontAwesomeClass","iconColor","dark","ThemeContext","createContext","useThemeValue","useContext","ThemeProvider","children","useState","theme","setTheme","isDark","toggleIsDark","Provider","value","toggleTheme","GameCellWrapper","styled","div","props","ValueWrapper","span","color","GameCell","id","onClick","className","GameGridWrapper","porps","GameGrid","board","map","cell","i","StartButton","reset","winner","disabled","variant","GameContainer","Heading","h1","TacWrapper","GameBodyWrapper","GameBody","xIsNext","resetGame","handleClick","ThemeWrapper","css","ThemeBar","Winner","hidden","isDraw","console","log","Game","Array","fill","setBoard","setXisNext","setDraw","squares","lines","length","a","b","c","calculateWinner","useEffect","indexOf","boardCopy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b60159ae.chunk.js","sourcesContent":["const light = {\r\n  textColor: `black`,\r\n  backgroundColor: `rgba(249, 200, 132, 1)`,\r\n  gridColor: `rgba(249, 200, 132, 0.5)`,\r\n  boadBackgroundColor: `rgba(252, 122, 30, 1)`,\r\n  xColor: `rgba(160, 10, 10, 1)`,\r\n  oColor: `rgba(225, 230, 220, 1)`,\r\n  fontAwesomeClass: `fas fa-sun`,\r\n  iconColor: \"black\",\r\n};\r\n\r\nconst dark = {\r\n  textColor: `rgba(0, 80, 158, 1)`,\r\n  backgroundColor: `rgba(0, 20, 40, 1)`,\r\n  gridColor: `rgba(0, 20, 40, 0.8)`,\r\n  boadBackgroundColor: `rgba(224, 225, 222, 1)`,\r\n  xColor: `rgba(2, 2, 20, 1)`,\r\n  oColor: `rgba(4, 4, 86, 1)`,\r\n  fontAwesomeClass: `fas fa-moon`,\r\n  iconColor: `white`,\r\n};\r\n\r\nexport { light, dark };\r\n","import { createContext, useContext, useState } from \"react\";\r\nimport { dark, light } from \"../utils/theme\";\r\n\r\nexport const ThemeContext = createContext(light);\r\n\r\nexport const useThemeValue = () => useContext(ThemeContext);\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [theme, setTheme] = useState(light);\r\n  const [isDark, toggleIsDark] = useState(false);\r\n\r\n  const toggleTheme = () => {\r\n    if (isDark) {\r\n      setTheme(light);\r\n      toggleIsDark(false);\r\n    } else {\r\n      setTheme(dark);\r\n      toggleIsDark(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { useThemeValue } from \"../context/themeContext\";\r\n\r\nconst GameCellWrapper = styled.div`\r\n  background-color: ${(props) => props.backgroundColor};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 118px;\r\n  width: 118px;\r\n  cursor: pointer;\r\n  color: transparent;\r\n`;\r\n\r\nconst ValueWrapper = styled.span`\r\n  font-size: 112px;\r\n  color: ${(props) => props.color};\r\n`;\r\n\r\nconst GameCell = ({ id, onClick, value }) => {\r\n  const { theme } = useThemeValue();\r\n\r\n  const color = value === \"X\" ? theme.xColor : theme.oColor;\r\n\r\n  return (\r\n    <GameCellWrapper\r\n      onClick={onClick}\r\n      id={id}\r\n      backgroundColor={theme.boadBackgroundColor}\r\n    >\r\n      <ValueWrapper className=\"size150\" color={color}>\r\n        {value}\r\n      </ValueWrapper>\r\n    </GameCellWrapper>\r\n  );\r\n};\r\n\r\nexport default GameCell;\r\n","import GameCell from \"./gameCell.jsx\";\r\nimport styled from \"styled-components\";\r\nimport { useThemeValue } from \"../context/themeContext.js\";\r\n\r\nconst GameGridWrapper = styled.div`\r\n  background-color: ${(porps) => porps.backgroundColor};\r\n\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(3, 1fr);\r\n  grid-gap: 20px;\r\n  margin-top: 40px;\r\n  max-width: fit-content;\r\n  user-select: none;\r\n`;\r\n\r\nconst GameGrid = ({ board, onClick }) => {\r\n  const { theme } = useThemeValue();\r\n\r\n  return (\r\n    <GameGridWrapper backgroundColor={theme.gridColor}>\r\n      {board.map((cell, i) => (\r\n        <GameCell key={i} id={i} value={cell} onClick={() => onClick(i)} />\r\n      ))}\r\n    </GameGridWrapper>\r\n  );\r\n};\r\n\r\nexport default GameGrid;\r\n","const StartButton = ({ reset, winner }) => {\r\n  return (\r\n    <button\r\n      disabled={winner}\r\n      className=\"m-2 p-2\"\r\n      onClick={reset}\r\n      variant=\"secondary\"\r\n    >\r\n      RESET\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default StartButton;\r\n","import GameGrid from \"./gameGrid\";\r\nimport StartButton from \"./buttons\";\r\nimport styled from \"styled-components\";\r\nimport { useThemeValue } from \"../context/themeContext\";\r\n\r\nconst GameContainer = styled.div`\r\n  background-color: ${(props) => props.backgroundColor};\r\n  margin: 40px;\r\n  padding: 20px;\r\n  border-radius: 25px;\r\n  margin-bottom: 70px;\r\n  position: absolute;\r\n  max-width: fit-content;\r\n  max-height: fit-content;\r\n`;\r\n\r\nconst Heading = styled.h1`\r\n  text-align: center;\r\n  font-weight: 900;\r\n  font-family: Roboto;\r\n  color: ${(props) => props.color};\r\n`;\r\n\r\nconst TacWrapper = styled.span`\r\n  color: ${(props) => props.color};\r\n`;\r\n\r\nconst GameBodyWrapper = styled.div`\r\n  background-color: ${(props) => props.backgroundColor};\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-flow: wrap;\r\n  font-family: sans-serif;\r\n  justify-content: center;\r\n  transition: all 0.6s ease;\r\n`;\r\n\r\nconst GameBody = ({ board, xIsNext, resetGame, winner, handleClick }) => {\r\n  const { theme } = useThemeValue();\r\n  return (\r\n    <GameBodyWrapper backgroundColor={theme.backgroundColor}>\r\n      <GameContainer backgroundColor={theme.boadBackgroundColor}>\r\n        <Heading color={theme.xColor}>\r\n          Tic <TacWrapper color={theme.oColor}>Tac</TacWrapper> Toe\r\n        </Heading>\r\n        <hr />\r\n        <div className=\"text-center row justify-content-around\">\r\n          <h1 className=\"m-0 p-2\">\r\n            {winner ? null : \"Next player: \" + (xIsNext ? \"X\" : \"O\")}\r\n          </h1>\r\n\r\n          <StartButton reset={resetGame} winner={winner} />\r\n        </div>\r\n        <hr />\r\n        <GameGrid board={board} onClick={handleClick} />\r\n      </GameContainer>\r\n    </GameBodyWrapper>\r\n  );\r\n};\r\n\r\nexport default GameBody;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { ThemeContext } from \"../context/themeContext\";\r\nimport { useContext } from \"react\";\r\n\r\nconst ThemeWrapper = styled.div`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 40px;\r\n  font-size: 50px;\r\n  transition: all 0.8s ease;\r\n  z-index: 2;\r\n\r\n  ${({ color }) =>\r\n    color &&\r\n    css`\r\n      color: ${color};\r\n    `};\r\n`;\r\n\r\nconst ThemeBar = () => {\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <ThemeWrapper onClick={toggleTheme} color={theme.iconColor}>\r\n      <i className={theme.fontAwesomeClass}></i>\r\n    </ThemeWrapper>\r\n  );\r\n};\r\n\r\nexport default ThemeBar;\r\n","const Winner = ({ winner, reset, isDraw }) => {\r\n  const hidden = !winner;\r\n\r\n  console.log(\"Winner\", hidden);\r\n\r\n  return (\r\n    <div className=\"winner\" hidden={hidden} onClick={reset}>\r\n      <h3>Winner: {winner}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Winner;\r\n","import { Fragment, useEffect, useState } from \"react\";\r\nimport { ThemeProvider, useThemeValue } from \"../context/themeContext\";\r\n\r\nimport GameBody from \"./gameBody\";\r\nimport ThemeBar from \"./themeBar\";\r\nimport Winner from \"./winner\";\r\nimport { calculateWinner } from \"./util\";\r\n\r\nconst Game = () => {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [xIsNext, setXisNext] = useState(true);\r\n  const [isDraw, setDraw] = useState(false);\r\n  const { theme } = useThemeValue();\r\n\r\n  const winner = calculateWinner(board);\r\n\r\n  const handleClick = (i) => {\r\n    const boardCopy = [...board];\r\n    // If user click an occupied square or if game is won, return\r\n    if (winner || boardCopy[i]) return;\r\n    // Put an X or an O in the clicked square\r\n    boardCopy[i] = xIsNext ? \"X\" : \"O\";\r\n    setBoard(boardCopy);\r\n    setXisNext(!xIsNext);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!winner && board.indexOf(null) === -1) {\r\n      setDraw(true);\r\n    }\r\n  }, [winner, board, isDraw]);\r\n\r\n  const resetGame = () => {\r\n    setBoard(Array(9).fill(null));\r\n    setDraw(true);\r\n  };\r\n\r\n  console.log(theme);\r\n\r\n  return (\r\n    <ThemeProvider>\r\n      <Fragment>\r\n        <GameBody\r\n          board={board}\r\n          xIsNext={xIsNext}\r\n          resetGame={resetGame}\r\n          winner={winner}\r\n          handleClick={handleClick}\r\n        />\r\n\r\n        <Winner winner={winner} isDraw={isDraw} reset={resetGame} />\r\n\r\n        <ThemeBar />\r\n      </Fragment>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import \"./index.css\";\r\n\r\nimport Game from \"./components/Main\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}